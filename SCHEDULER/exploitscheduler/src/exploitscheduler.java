/*
Users Table
ACTIVE
0 = not able to log in
1 = able to log in
STATUS
0 = created - Set to 0 when the record is first created and the user should be sent an activation email.
1 = active and able to log in - The user has clicked a link to activate the account and can now log in
2 = email sent - The user has been sent an activation email.

Scans Table
STATUS - I have space between these numbers to allow for additions to be placed in order.
0 = request created - 'Request Created' should be displayed by status. This record should be added to the query for scans that need to be completed.
10 = scan started - 'In Progress' should be displayed for status. This record has been gathered by the scanner and a result is in progress.
20 = scan completed - 'View Report' should be displayed for status. The scan results are available in a file named the same as the scan_guid field in the db.
100 = scan error - 'Error' should be displayed for status. This is considered a completed action.

 */

import com.google.gson.Gson;
import com.google.gson.JsonObject;

import java.io.*;
import java.nio.file.Files;
import java.nio.file.Path;
import java.nio.file.Paths;
import java.sql.*;
import java.time.LocalDateTime;
import java.time.format.DateTimeFormatter;
import java.util.Arrays;
import java.util.List;

public class exploitscheduler {

    // Read the configuration from the config.json settings
    static String db_url = getJSONConfigString("db_url");
    static String db_user = getJSONConfigString("db_user");
    static String db_password = getJSONConfigString("db_password");
    static String file_lock_name = getJSONConfigString("file_lock_name");

    public static String getLocalPath(String fileName) {
        // Use this function to get the local path, if it does not
        // find the file, it will use the DEV version of the file path

        String pathToFile = "";

        Path filePath = Paths.get(System.getProperty("user.dir"), fileName);

        if (Files.exists(filePath) == true || Files.isDirectory(filePath)==true) {
            pathToFile = filePath.toString();
        } else {
            pathToFile = getLocalPath_DEV() + "\\" + fileName;
        }

        return pathToFile;

    }
    public static String getLocalPath_DEV() {
        // This is the DEV version of the file path

        String classpath = System.getProperty("java.class.path");

        // Split the classpath using the path separator
        String[] classpathEntries = classpath.split(
                System.getProperty("path.separator"));

        // Check if there are any entries
        if (classpathEntries.length > 0) {
            // Get the first classpath entry
            classpath = classpathEntries[0];
        } else {
            classpath = "";
        }

        return classpath;

    }
    public static String readTextFile(String pathToFile) {
        // Given a full path including file name of a file, this function will
        // read the file into a string and return the string.

        String fileContent = "";

        try (BufferedReader reader = new BufferedReader(
                new FileReader(pathToFile))) {
            StringBuilder stringBuilder = new StringBuilder();
            String line;

            while ((line = reader.readLine()) != null) {
                stringBuilder.append(line);
                // Add newline character for each line (optional).
                stringBuilder.append("\n");
            }

            fileContent = stringBuilder.toString();

        } catch (IOException e) {
            e.printStackTrace();
            // Write this to a log file
            writeToLogFile(e.getMessage());
            writeToLogFile(String.valueOf(e.getStackTrace()));
        }

        return fileContent;
    }
    public static String getJSONConfigString(String configName) {

        Gson gson = new Gson();

        // Convert JSON string to Java object
        String jsonString = readTextFile( getLocalPath("config.json"));
        JsonObject jsonObject = gson.fromJson(jsonString, JsonObject.class);

        return jsonObject.get(configName).toString().replace("\"","");

    }

    public static void setFileLock(String filePath) {
        File file = new File(filePath);

        try {
            if (file.createNewFile()) {
                System.out.println("Process Locked.");
            } else {
                System.out.println("Process Already Locked.");
            }
        } catch (IOException e) {
            System.out.println("An error occurred while creating the file: "
                    + e.getMessage());
            e.printStackTrace();
            // Write this to a log file
            writeToLogFile(e.getMessage());
            writeToLogFile(String.valueOf(e.getStackTrace()));
        }
    }

    public static void removeFileLock(String filePath) {
        File file = new File(filePath);

        // Check if the file exists
        if (file.exists()) {
            // Try to delete the file
            boolean deleted = file.delete();

            // Check if the deletion was successful
            if (deleted) {
                System.out.println("Process Lock Removed");
            } else {
                System.err.println("Failed to remove Process Lock: " + filePath);
            }
        } else {
            System.out.println("Process Lock does not exist: " + filePath);
        }
    }

    public static boolean isFileLock(String filePath) {
        File file = new File(filePath);
        return file.exists();
    }

    public static String commandToString(List<String> command) {
        StringBuilder sb = new StringBuilder();
        for (String part : command) {
            sb.append(part).append(" ");
        }
        return sb.toString().trim();
    }

    public static void runCommand(String scan_key) {
        // This function will run a command using the scan data provided by param

        try {
            // Define command based on OS
            String os = System.getProperty("os.name").toLowerCase();
            String script;
            if (os.contains("windows")) {
                script = "runscan.bat";
            } else {
                script = getLocalPath("runscan.sh");
            }

            // Build command to run the script with the provided directory as a parameter
            List<String> commands = Arrays.asList(script, scan_key);

            // Start the process
            ProcessBuilder builder = new ProcessBuilder(commands);
            Process process = builder.start();
            process.waitFor(); // Wait for the process to finish

        } catch (IOException | InterruptedException e) {
            e.printStackTrace();
            // Write this to a log file
            writeToLogFile(e.getMessage());
            writeToLogFile(String.valueOf(e.getStackTrace()));
        }

    }

    public static void writeToLogFile(String message) {
        try {
            // Create or append to the log file
            File logFile = new File(getLocalPath("scheduler.log"));
            if (!logFile.exists()) {
                logFile.createNewFile();
            }

            // Get current date and time
            LocalDateTime now = LocalDateTime.now();
            DateTimeFormatter formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss.SSSSSS");
            String dateTime = now.format(formatter);

            // Append message with date and time to the log file
            BufferedWriter writer = new BufferedWriter(new FileWriter(logFile, true));
            writer.write(dateTime + " - " + message);
            writer.newLine();
            writer.close();

        } catch (IOException e) {
            System.err.println("Error writing to log file: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        // This is the main function that will run when program is run.

        // Check to see if already in process
        if (isFileLock(getLocalPath(file_lock_name)) == false) {

            // Set File Lock
            setFileLock(getLocalPath(file_lock_name));

            // PROCESS PENDING SCANS
            try (Connection conn = DriverManager.getConnection(db_url, db_user, db_password)) {
                String mySql = "{CALL scan_view_bystatus(0)}";
                PreparedStatement pStatement = conn.prepareCall(mySql);
                ResultSet rs = pStatement.executeQuery();

                while (rs.next()) {
                    // Get the scan details
                    String scan_key = rs.getString("scan_key");
                    String scan_user_ID = rs.getString("scan_user_ID");

                    // Write this to a log file
                    writeToLogFile("Requesting scan for ID: " +  scan_key);
                    System.out.println("Requesting scan for ID: " +  scan_key);

                    // Here we run the scan from the SCANNER Component
                    runCommand(scan_key);

                    // Write this to a log file
                    writeToLogFile("Completed scan for ID: " +  scan_key);

                }

                // Remove File Lock
                removeFileLock(getLocalPath(file_lock_name));

            } catch (SQLException e) {
                e.printStackTrace();
                // Write this to a log file
                writeToLogFile(e.getMessage());
                writeToLogFile(String.valueOf(e.getStackTrace()));
            }

        }
    }
}
