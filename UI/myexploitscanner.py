from functools import wraps
import json
from flask import Flask, render_template, request, redirect, url_for, make_response
import mysql.connector
from flask_mail import Mail, Message


with open('config.json', 'r') as f:
    config = json.load(f)

app = Flask(__name__)
app.config['SESSION_COOKIE_SECURE'] = True
app.config['REMEMBER_COOKIE_SECURE'] = True
app.config['MAIL_SERVER'] = config['mail_server']
app.config['MAIL_PORT'] = 587
app.config['MAIL_USE_TLS'] = True
app.config['MAIL_USERNAME'] = config['mail_username']
app.config['MAIL_PASSWORD'] = config['mail_password']

mail = Mail(app)

def get_db_connection():
    """ This function --- """
    return mysql.connector.connect(host=config['db_host']
                                   , database=config['db_database']
                                   , user=config['db_user']
                                   , password=config['db_password'])

def read_file_to_string(filepath):
    """Reads a file's content into a string and returns it."""
    with open(filepath, 'r') as file:
        return file.read()
    
def send_email(to, guid):
    """ This function --- """
    msg = Message("Your Account GUID", sender="no-reply@myexploitscanner.com", recipients=[to])
    msg.html = f"""<html>
                    <body>
                    <h3>Thank you for registering!</h3>
                    Please click the following link: <a href="{config['web_root_url']}/activate?guid={guid}">click here to activate</a><br />
                    or<br />
                    copy and paste the following link into your browser:<br />
                    {config['web_root_url']}/activate?guid={guid}<br />
                    to activate your account.<br />
                    </body>
                    </html>"""
    mail.send(msg)

def get_scan_history(user_id):
    """ This function --- """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.callproc('scan_view_byuserid', [user_id])
        # Fetch the result set
        scans = [result.fetchall() for result in cursor.stored_results()]
        print(scans[0])
        return scans[0]
    except Exception as e:
        print(f"An error occurred: {e}")
        # Handle error or log it
        return ()
    finally:
        cursor.close()
        conn.close()

def get_scan_types():
    """ This function --- """
    try:
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.callproc('scantype_view_all', [])
        # Fetch the result set
        scan_types = [result.fetchall() for result in cursor.stored_results()]
        print(scan_types[0])
        return scan_types[0]
    except Exception as e:
        print(f"An error occurred: {e}")
        # Handle error or log it
        return ()
    finally:
        cursor.close()
        conn.close()

@app.route('/')
def homepage():
    """ This function --- """
    return render_template('template-home.html')

@app.route('/accountsuccess')
def accountsuccess():
    """ This function --- """
    return render_template('template-accountsuccess.html')

@app.route('/login', methods=['GET', 'POST'])
def login():
    """ This function --- """
    message = ''
    if request.method == 'POST':
        email = request.form['email']
        password = request.form['password']
        conn = get_db_connection()
        cursor = conn.cursor()
        cursor.callproc('user_login', [email, password])
        results = [result.fetchall() for result in cursor.stored_results()]
        cursor.close()
        conn.close()
        user_key = int(results[0][0][0])
        print("user_key::", user_key)
        if user_key > 0:
            resp = make_response(redirect(url_for('dashboard')))
            resp.set_cookie('isLoggedIn', 'true')
            resp.set_cookie('uid', str(user_key))
            return resp
        else:
            # pylint: disable=line-too-long
            message = """Invalid email or password. Or perhaps your account has not yet been activated.
                        If you have not activated your account, please check your email for activation 
                        link from no-reply@myexploitscanner.com."""
    return render_template('template-login.html', message=message)

@app.route('/create', methods=['GET', 'POST'])
def createaccount():
    """ This function --- """
    message = ''
    if request.method == 'POST':
        name = request.form['name']
        email = request.form['email']
        password = request.form['password']
        confirm_password = request.form['passwordconfirm']

        if password == confirm_password:
            conn = get_db_connection()
            cursor = conn.cursor()
            cursor.callproc('user_create', [email, password, name])
            #user_key = cursor.fetchone()[0]
            results = [result.fetchall() for result in cursor.stored_results()]
            cursor.close()

            if results[0][0][0] > 0:
                print("Created::---", results[0][0][0] )
                user_key = int(results[0][0][0])
            else:
                user_key = 0

            cursor = conn.cursor()
            cursor.callproc('user_view_bykey', [user_key])
            results = [result.fetchall() for result in cursor.stored_results()]
            user_guid = results[0][0][0]
            user_email = results[0][0][1]
            print("Query::---", results[0][0][0], results[0][0][1] )
            cursor.close()
            conn.close()

            if len(user_guid) > 0:
                send_email(user_email, user_guid)  # Email, GUID
                return redirect(url_for('accountsuccess'))
            else:
                message = 'User could not be created.'
        else:
            message = 'Password and Confirm Password fields must match.'
    return render_template('template-create.html')

@app.route('/logout')
def logout():
    """ This function --- """
    resp = make_response(redirect(url_for('homepage'))) 
    for cookie in request.cookies:
        resp.delete_cookie(cookie)
    return resp

@app.route('/request_scan', methods=['POST'])
def request_scan():
    """ This function --- """
    user_id = request.cookies.get('uid')
    uri = request.form['uri']
    scantype_id = request.form['scantype']

    print("USERID:::", user_id)

    # Call stored procedure to create scan
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.callproc('scan_create', [scantype_id, uri, user_id])
    cursor.close()
    conn.commit()  # Make sure to commit your changes
    conn.close()

    # Reload dashboard page
    return redirect(url_for('dashboard'))

@app.route('/dashboard')
def dashboard():
    """ This function --- """
    user_id = request.cookies.get('uid')  # Assuming 'uid' cookie is set upon login
    scan_history = get_scan_history(user_id)
    scan_types = get_scan_types()
    total_records = sum(len(result) for result in scan_history)
    return render_template('template-dashboard.html'
                           , scan_history=scan_history, scan_types=scan_types
                           , total_records=total_records )

@app.route('/activate')
def activate():
    """ This function --- """
    activation_success = False
    # Get guid from url
    param_guid = str(request.args.get('guid', '0')).strip()
    param_guid = param_guid[:36] # make sure not stuffed or too long
    print("GUID:::", param_guid)
    # Try to get user_key from guid
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.callproc('user_view_byguid', [param_guid])
    results = [result.fetchall() for result in cursor.stored_results()]
    total_records = sum(len(result) for result in results)
    cursor.close()

    if total_records > 0:
        print("FOUND GUID::---", results[0][0][0] )
        user_key = int(results[0][0][0])
        # User GUID found, Activate User
        cursor = conn.cursor()
        cursor.callproc('user_update_status', [user_key, 1])
        conn.commit()
        cursor.close()
        cursor = conn.cursor()
        cursor.callproc('user_update_active', [user_key, 1])
        conn.commit()
        cursor.close()
        activation_success = True
    else:
        user_key = 0
        activation_success = False

    conn.close()

    return render_template('template-activate.html'
                           , activation_success= activation_success )

@app.route('/account', methods=['GET', 'POST'])
def account():
    """ This function --- """
    message= ''
    messagetype= ''
    name= ''
    if request.method == 'POST':
        user_key = request.cookies.get('uid')
        name = request.form['name']
        password = request.form['password']
        confirm_password = request.form['confirm_password']

        if password and (password != confirm_password):
            message='Passwords do not match.'
            messagetype = 'danger'
            return redirect(url_for('account'))

        conn = get_db_connection()
        cursor = conn.cursor()

        if name:
            cursor.callproc('user_update_name', [user_key, name])
            conn.commit()

        if password and password == confirm_password:
            cursor.callproc('user_update_password', [user_key, password])
            conn.commit()

        cursor.close()
        conn.close()

        message = 'Account update was successful.'
        messagetype = 'success'

        return redirect(url_for('account'))

    return render_template('template-account.html'
                           , message= message, messagetype= messagetype, name= name)

@app.route('/viewreport')
def viewreport():
    """ This function --- """
    param_guid = str(request.args.get('guid', '0')).strip()
    param_guid = param_guid[:36] # make sure not stuffed or too long
    print("GUID:::", param_guid)
    # Try to get user_key from guid
    conn = get_db_connection()
    cursor = conn.cursor()
    cursor.callproc('scan_view_byguid', [param_guid])
    results = [result.fetchall() for result in cursor.stored_results()]
    total_records = sum(len(result) for result in results)
    cursor.close()

    date_time = ''
    scan_type = ''
    scan_uri = ''
    scan_report = ''

    if total_records > 0:
        print("FOUND KEY::---", results[0][0][0] )
        # Scan GUID found, get scan details
        date_time = results[0][0][5]
        scan_type = results[0][0][6]
        scan_uri = results[0][0][2]
        scan_report = read_file_to_string(config['path_report_dir'] + param_guid + ".report")
    else:
        date_time = 'not found'
        scan_type = 'not found'
        scan_uri = 'not found'
        scan_report = 'not found'

    return render_template('template-viewreport.html', date_time=date_time
                           ,scan_type=scan_type, scan_uri=scan_uri, scan_report=scan_report)


if __name__ == '__main__':
    app.run(debug=True)
